/*
========================================================================================
    nf-core/eqtl Nextflow base config file
========================================================================================
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/
params{
    chunkSize=70
    mem1= 10000
    LIMIX{
        run=false
    }
    TensorQTL{
        run=true
        interaction_file=''  \\ to run interaction, provide a TSV with genotype ID and interaction 
        utilise_gpu = false
        use_gt_dosage = true 
        optimise_pcs = true
    }
    mem1= 12000
    outdir='results'
    copy_mode = "rellink"
    utilise_gpu = false
    input_tables_column_delimiter = '\t' 
    n_min_cells = '5' // The number of cells for individual to use. 
    n_min_individ = '30' //Do not select less than 25 since this may result in a permutation issue with tensorqtl
    aggregation_method = 'dMean,dSum' // can be: dMean, dSum
    dMean_norm_method = 'cp10k' // Normlisation method for dMean, can be cp10k or a precomputed normalised counts layer in the anndata file
    inverse_normal_transform = 'TRUE' // Inverse normal trasnform data as part of normalisation
    bcftools_filters = '--max-alleles 2 -m2 -M2 -v snps'
    //plink2_filters = '--allow-extra-chr 0 --chr 1-22 XY --output-chr chrM --indep-pairwise 250 50 0.2 --snps-only --rm-dup exclude-all'
    plink2_filters = '--allow-extra-chr 0 --chr 1-22 XY --output-chr chrM --snps-only --rm-dup exclude-all'
    maf = 0.1
    hwe= 0.0000001
    windowSize=100000
    numberOfPermutations=1000
    filter_method = 'HVG' // filterByExpr|HVG|None
    tmpdir = "${launchDir}/work"

    covariates{
        nr_phenotype_pcs = '10,20,30'
        nr_genotype_pcs = 10
        extra_covariates_file = ''
    }
}


process {
    cache = 'lenient'
    // TODO nf-core: Check the defaults for all processes
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    containerOptions = " --cleanenv --containall -B "+params.tmpdir+":/tmp --env NUMBA_CACHE_DIR='"+params.tmpdir+"' --env MPLCONFIGDIR='"+params.tmpdir+"'"

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // TODO nf-core: Customise requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_low {
        cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h   * task.attempt, 'time'    ) }
        queue = { task.attempt > 1 ? 'long' : 'normal' }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h   * task.attempt, 'time'    ) }
        queue = { task.attempt > 1 ? 'long' : 'normal' }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:process_medium_memory {
        memory = { check_max( 100.GB * task.attempt, 'memory' ) }
    }

    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withName: LIMIX{
        errorStrategy = { task.attempt <= 2 ? 'retry' : 'ignore' }
    }


    withLabel: gpu {
        cpus = 1
        maxForks=4

        errorStrategy = 'retry'
        queue = { task.attempt > 1 ? 'gpu-huge' : 'gpu-huge' }
        clusterOptions = { "-M "+params.mem1*task.attempt+" -R 'select[ngpus>0 && mem>="+params.mem1*task.attempt+"] rusage[ngpus_physical=1.00,mem="+params.mem1*task.attempt+"] span[ptile=1]' -gpu 'mode=exclusive_process'" }
	    memory = '' // set to null '' as already specified in clusterOptions

        time   = { check_max( 12.h   * task.attempt, 'time'    ) }
        containerOptions = {
            workflow.containerEngine == "singularity" ? '--containall --cleanenv --nv -B /tmp':
            ( workflow.containerEngine == "docker" ? '--gpus all': null )
        }
    }

    withName: TENSORQTL{
        errorStrategy = { task.attempt <= 2 ? 'retry' : 'ignore' }
    }

    withName: SPLIT_PHENOTYPE_DATA{
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = 12.h  
    }



}

# singularity {
#   enabled = true
#   cacheDir   = "${baseDir}/singularity"
#   runOptions = '--bind /lustre --no-home'
# }

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}